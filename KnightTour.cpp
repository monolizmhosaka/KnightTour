// KnightTour.cpp : このファイルには 'main' 関数が含まれています。プログラム実行の開始と終了がそこで行われます。
//

#include <iostream>

#define N 5	//実際の盤面サイズ
int board[N + 4][N + 4];	//移動先が範囲外の判定をするため+4多く確保
//例 Nが5の場合は以下の盤面ができる
//1 1 1 1 1 1 1 1 1
//1 1 1 1 1 1 1 1 1
//1 1 0 0 0 0 0 1 1
//1 1 0 0 0 0 0 1 1
//1 1 0 0 0 0 0 1 1
//1 1 0 0 0 0 0 1 1
//1 1 0 0 0 0 0 1 1
//1 1 1 1 1 1 1 1 1
//1 1 1 1 1 1 1 1 1


// 移動方向XY
const int dx[8] = { 2, 1, -1, -2, -2, -1,  1,  2 };
const int dy[8] = { 1, 2,  2,  1, -1, -2, -2, -1};

void printBoard()
{
	static int solution = 0;

	printf("\n 解 %d\n", ++solution);
	for (int i = 2; i <= N + 1; i++)
	{
		for (int j = 2; j <= N + 1; j++) printf("%4d", board[i][j]);
		printf("\n");
	}
}

void tryMove(int x, int y)
{
	int i;
	static int count = 0;

	if (board[x][y] != 0) return;	//移動先がいけないとこなら戻る

	//行けたら値を代入
	board[x][y] = ++count;

	if (count == N * N)
	{	// すべての盤面を網羅したら結果を表示
		printBoard();
	}
	else {
		// まだ終わっていなければ次のところを順次トライ！
		for (i = 0; i < 8; i++) tryMove(x + dx[i], y + dy[i]);
	}
	board[x][y] = 0; 
	count--;
}

int main()
{
	//盤面を初期化
	for (int i = 0; i <= N + 3; i++)
		for (int j = 0; j <= N + 3; j++) board[i][j] = 1;
	for (int i = 2; i <= N + 1; i++)
		for (int j = 2; j <= N + 1; j++) board[i][j] = 0;

	//盤面左上から開始
	tryMove(2, 2);
	return 0;


}

// プログラムの実行: Ctrl + F5 または [デバッグ] > [デバッグなしで開始] メニュー
// プログラムのデバッグ: F5 または [デバッグ] > [デバッグの開始] メニュー

// 作業を開始するためのヒント: 
//    1. ソリューション エクスプローラー ウィンドウを使用してファイルを追加/管理します 
//   2. チーム エクスプローラー ウィンドウを使用してソース管理に接続します
//   3. 出力ウィンドウを使用して、ビルド出力とその他のメッセージを表示します
//   4. エラー一覧ウィンドウを使用してエラーを表示します
//   5. [プロジェクト] > [新しい項目の追加] と移動して新しいコード ファイルを作成するか、[プロジェクト] > [既存の項目の追加] と移動して既存のコード ファイルをプロジェクトに追加します
//   6. 後ほどこのプロジェクトを再び開く場合、[ファイル] > [開く] > [プロジェクト] と移動して .sln ファイルを選択します
